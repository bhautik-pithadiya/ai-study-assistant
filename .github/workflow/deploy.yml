name: Build-and-Deploy

on:
  push:
    branches: [ main ]          # run on every push to main
  workflow_dispatch:            # allow manual runs from the Actions tab

env:
  IMAGE: ghcr.io/${{ github.repository }}   # container registry path
  TAG: ${{ github.sha }}                    # image tag = commit hash

jobs:
# ───────────────────────────────────────────────────────────────
  build:
# ───────────────────────────────────────────────────────────────
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Build & push the Docker image to GitHub Container Registry
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to ghcr.io
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.IMAGE }}:${{ env.TAG }}

# ───────────────────────────────────────────────────────────────
  deploy:
# ───────────────────────────────────────────────────────────────
    needs: build               # wait until image is published
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Add the SSH private key stored in repository secrets
      - name: Start SSH-Agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      # 2️⃣ Run remote commands that pull the new image and restart the stack
      - name: Deploy on server via SSH
        uses: appleboy/ssh-action@v1.0.0           # community SSH helper
        with:
          host:     ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          port:     ${{ secrets.SSH_PORT || 22 }}
          script: |
            set -e
            echo "Pulling newest image..."
            docker login ghcr.io -u ${{ secrets.REGISTRY_USER }} -p ${{ secrets.REGISTRY_PAT }}
            docker pull $IMAGE:$TAG

            echo "Recreating container..."
            docker stop cheating-app || true
            docker rm   cheating-app || true
            # If you already have a docker-compose.yml on the server, use it instead:
            # docker compose up -d --pull always
            docker run -d --name cheating-app \
                        -p 8000:8000 \
                        $IMAGE:$TAG

            echo "✅ Deploy complete"
